from pwn import remote, process, log

r = remote("desfunctional.2024.ctfcompetition.com", 1337)
# r = process('python chall-orig.py', shell=True)

r.recvuntil(b"3. Get the flag\n")
r.sendline(b"1")
chall = r.recvline()
chall_inverted = bytes(i ^ 0xff for i in bytearray.fromhex(chall.decode())).hex().encode()

def xor(hex1, hex2):
    b1 = bytearray.fromhex(hex1.decode())
    b2 = bytearray.fromhex(hex2.decode())
    return bytes(a ^ b for a, b in zip(b1, b2)).hex().encode()

def decrypt(r, req):
    r.recvuntil(b"3. Get the flag\n")
    r.sendline(b"2")
    r.recvuntil(b"(hex) ct: ")
    r.sendline(req)
    resp = r.recvline()[:-1]
    if False:
        print("requ:", req)
        print("resp:", resp)
        print("resp:", bytearray.fromhex(resp.decode()))
    return resp

db = {}    
iv_inverted = None
for i in range(48):
    leak_iv_inverted = b"f"*2*8*2
    resp = decrypt(r, leak_iv_inverted)
    if resp in db:
        iv_inverted = xor(resp[:16], resp[16:])
        log.info(f"Inverted IV found: {iv_inverted}")
        break
    db[resp] = True

db = {}
chall_plain = None    
for i in range(48):
    resp = decrypt(r, iv_inverted + chall_inverted)
    resp = resp[16:]
    if resp in db:
        chall_plain = bytes(bytearray.fromhex(resp.decode()))
        log.info(f"Challenge found: {chall_plain}")
        break
    db[resp] = True
    
    
r.recvuntil(b"3. Get the flag\n")
r.sendline(b"3")
r.recvuntil(b"(hex) pt: ")
r.sendline(chall_plain.hex().encode())
    
r.clean_and_log(timeout=0.1)

r.interactive()
